题目描述：给定A, B, N (1 <= A <= B <= 10^15，1<=N <= 10^9).求[A,B]区间内与N互素的数的个数
步骤：
       （1）将问题化为求1~B，1~A中与N互素的数的个数的差，当然考虑到A可能与N互素的情况，在实际操作时，
                即求1~A时最好改成求1~A-1（包含A-1）；
       （2）求N的质因子（可参考：http://blog.csdn.net/yzj577/article/details/38148087）；
       （3）直接运用容斥原理（关于容斥原理的知识，可参考：http://baike.baidu.com/view/573741.htm?fr=aladdin）
                现在问题的关键是如何通过代码实现容斥原理，看到某博客说有三种可行的方法：dfs(深搜)，队列数组，
                位运算，而我们在课上讲的是用位运算来实现的，所以我在这里用位运算来做。
举例：
         求1~50中与N=30互素的个数,30=2*3*5*,结果为50-50/2-50/3-50/5+50/(2*3)+50/(2*5)+50/(3*5)-50/(2*3*5)
               如果用’0‘和’1‘标记2,3,5，为’1‘时要除50，为’0‘时不需，那么，二进制数000,001,010,011，・・・・・・，111，
         不就刚好对应上式中的2,3,5在除数中出现的情况，001―-2, 010―-3,011―-3*2，110―-5*3,111―-5*3*2・・・・・・
         也就是说，判断从1~7中每个数对应的二进制数的’0‘和’1‘出现的情况如何，第几位出现’1‘，对应的N的质因子
         就要作除数，具体过程请参照下面代码。
#include<stdio.h>
int prime[20],num;
void suyin(int n)     //求n的质因子
{
    int i;
      num=0;
        if (n%2==0)     //先把偶数的情况考虑，下面就可以只判断奇数了
        {
            prime[num++]=2;
              while(n%2==0) n/=2;
        }
        for (i=3;i*i<=n;i+=2)   
//大于n的开方的质因子最多只有一个，下面的（if (n>1) prime[num++]=n）就是判断这个质因子是否存在  
        {
            if (n%i==0)
            {
                prime[num++]=i;
                while (n%i==0) n/=i;
            }
        }
        if (n>1) prime[num++]=n;   
}
long long husu(long long a,int m)
{
   long long s,sum;
   int i,j;
     sum=a;
       for (i=1;i<m;i++)
        {
          s=1;
            for (j=0;j<num;j++)
              {
                if ((i>>j)&1==1) s=(-1)*s*prime[j];//每次按位右移后取最右边一位数判断
                if ((i>>(j+1))==0) break;      //如果已经是0了当然不用再判断了
              }
           sum=sum+a/s;
        }
    return sum;
}
int main()
{
   long long a,b,tot;
   int n,t,k=1,i;
     scanf("%d",&t);
       while (t--)
         {
           scanf("%I64d%I64d%d",&a,&b,&n);
             suyin(n);
               int m=(1<<num);            //求最小的num+1位的二进制数，减一后就是最大num位的二进制数
             tot=husu(b,m)-husu(a-1,m);
           printf("Case #%d: %I64d\n",k++,tot);
         }
   return 0;
}